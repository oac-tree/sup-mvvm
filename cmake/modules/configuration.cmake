# -----------------------------------------------------------------------------
# Modules
# -----------------------------------------------------------------------------

include(CTest)
include(CodeTools)
include(GenerateExportHeader)
include(GNUInstallDirs)

if(COA_SETUP_COVERAGE)
  include(CodeCoverage)
  append_coverage_compiler_flags()
  #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g -fprofile-arcs -ftest-coverage --coverage")
  message(STATUS " Coverage enabled ${CMAKE_CXX_FLAGS}")
endif()

# -----------------------------------------------------------------------------
# CODAC enviorenment
# -----------------------------------------------------------------------------
if(NOT COA_NO_CODAC)
  find_package(CODAC OPTIONAL_COMPONENTS site-packages Python MODULE)
endif()
if(CODAC_FOUND)
  # Append CODAC_CMAKE_PREFIXES to cmake seard directories, this helps cmake find packages installed in the CODAC enviorenment
  list(APPEND CMAKE_PREFIX_PATH ${CODAC_CMAKE_PREFIXES})

  # If CODAC module provides python executable, override Python3_EXECUTABLE with it
  if(CODAC_Python_FOUND AND NOT Python3_EXECUTABLE)
    set(Python3_EXECUTABLE ${CODAC_PYTHON_EXECUTABLE})
  endif()

  # When operating inside a CODAC CICD system build the documentation
  if(CODAC_CICD)
    set(COA_BUILD_DOCUMENTATION ON)
  endif()
else()
  message(STATUS "Compiling without CODAC")
endif()

# -----------------------------------------------------------------------------
# Variables
# -----------------------------------------------------------------------------
if(COA_SETUP_COVERAGE)
  # On coverage builds  alsways skip building docs and build tests
  set(COA_BUILD_DOCUMENTATION OFF)
endif()

get_filename_component(SUP_MVVM_PROJECT_DIR "${CMAKE_CURRENT_LIST_DIR}/../.." ABSOLUTE)

set(SUP_MVVM_SOVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR})
set(SUP_MVVM_BUILDVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})
set(SUP_MVVM_TESTRESULT_DIR ${CMAKE_BINARY_DIR}/test_result)

# Qt related variables
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

# -----------------------------------------------------------------------------
# Directories
# -----------------------------------------------------------------------------
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

file(MAKE_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
file(MAKE_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
file(MAKE_DIRECTORY ${SUP_MVVM_TESTRESULT_DIR})

if(DEFINED TEST_OUTPUT_DIRECTORY)
  file(MAKE_DIRECTORY ${TEST_OUTPUT_DIRECTORY})
else()
  set(TEST_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif()

# directory for autogenerated configs
set(SUP_MVVM_AUTOGEN_DIR ${CMAKE_BINARY_DIR}/autogen/sup-mvvm)
file(MAKE_DIRECTORY ${SUP_MVVM_AUTOGEN_DIR})

# -----------------------------------------------------------------------------
# Dependencies
# -----------------------------------------------------------------------------
if(COA_USE_QT6)
  set(QT_VERSION_MAJOR 6)
  set(QT_FIND_COMPONENTS Widgets Core Gui PrintSupport Test)
else()
  set(QT_VERSION_MAJOR 5)
  set(QT_FIND_COMPONENTS Widgets Core Gui PrintSupport Test)
endif()

if(CODAC_FOUND)
  # Set NO_CMAKE_PATH and PATHS to CMAKE_PREFIX_PATH, so that find_package will use the system Qt first
  # if it finds one, but still look in CMAKE_PREFIX_PATH as a last resort. This gives system Qt priority over CODAC Qt
  set(QT_FIND_OPTIONS NO_CMAKE_PATH PATHS ${CMAKE_PREFIX_PATH})
endif()

find_package(Qt${QT_VERSION_MAJOR} REQUIRED ${QT_FIND_OPTIONS} COMPONENTS ${QT_FIND_COMPONENTS})

message(STATUS "Qt${Qt${QT_VERSION_MAJOR}_VERSION_MAJOR}.${Qt${QT_VERSION_MAJOR}_VERSION_MINOR}.${Qt${QT_VERSION_MAJOR}_VERSION_PATCH} found")
message(STATUS " Includes: ${Qt${QT_VERSION_MAJOR}Widgets_INCLUDE_DIRS}")
get_target_property(QT_CORE_LIB_LOCATION Qt${QT_VERSION_MAJOR}::Core LOCATION_Release)
message(STATUS " Core library: ${QT_CORE_LIB_LOCATION}")

find_package(Threads)

# -----------------------------------------------------------------------------
# Generating config files
# -----------------------------------------------------------------------------
configure_file(${SUP_MVVM_PROJECT_DIR}/cmake/configs/testconfig.h.in ${SUP_MVVM_AUTOGEN_DIR}/testconfig.h @ONLY)
configure_file(${SUP_MVVM_PROJECT_DIR}/cmake/configs/version_constants.h.in ${SUP_MVVM_AUTOGEN_DIR}/version_constants.h @ONLY)
