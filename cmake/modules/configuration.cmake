# -----------------------------------------------------------------------------
# Modules
# -----------------------------------------------------------------------------

include(CTest)
include(CodeTools)
include(GenerateExportHeader)
include(GNUInstallDirs)
include(FindPackageMessage)

# -----------------------------------------------------------------------------
# CODAC environment
# -----------------------------------------------------------------------------
if(NOT COA_NO_CODAC)
  find_package(CODAC OPTIONAL_COMPONENTS site-packages Python MODULE QUIET)
endif()

if(CODAC_FOUND)
  set(CODAC_FOUND_MESSAGE "Building with CODAC")

  # Append CODAC_CMAKE_PREFIXES to cmake seard directories, this helps cmake find packages installed in the CODAC enviorenment
  list(APPEND CMAKE_PREFIX_PATH ${CODAC_CMAKE_PREFIXES})

  # If CODAC module provides python executable, override Python3_EXECUTABLE with it
  if(CODAC_Python_FOUND AND NOT Python3_EXECUTABLE)
    set(Python3_EXECUTABLE ${CODAC_PYTHON_EXECUTABLE})
  endif()

  # Check if operating inside a CODAC CICD system
  if(CODAC_CICD)
    string(APPEND CODAC_FOUND_MESSAGE " CICD environment")

    set(COA_BUILD_DOCUMENTATION ON)
  else()
    string(APPEND CODAC_FOUND_MESSAGE " environment")
  endif()

  find_package_message(
    CODAC_DETAILS
    "${CODAC_FOUND_MESSAGE}: ${CODAC_DIR} (version \"${CODAC_VERSION}\")"
    "[${CODAC_FOUND}][${CODAC_DIR}][${CODAC_CICD}][v${CODAC_VERSION}]"
  )
else()
  find_package_message(CODAC_DETAILS "Building without CODAC environment" "[${CODAC_FOUND}]")
endif()

if(COA_COVERAGE)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g -fno-inline --coverage")
  message(STATUS "Enabling test coverage information: ${CMAKE_CXX_FLAGS}")
  set(COA_BUILD_DOCUMENTATION OFF)
endif()

# -----------------------------------------------------------------------------
# Variables
# -----------------------------------------------------------------------------
get_filename_component(SUP_MVVM_PROJECT_DIR "${CMAKE_CURRENT_LIST_DIR}/../.." ABSOLUTE)

set(SUP_MVVM_SOVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR})
set(SUP_MVVM_BUILDVERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH})
set(SUP_MVVM_TESTRESULT_DIR ${CMAKE_BINARY_DIR}/test_result)

# Qt related variables
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

# -----------------------------------------------------------------------------
# Directories
# -----------------------------------------------------------------------------
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})

file(MAKE_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
file(MAKE_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
file(MAKE_DIRECTORY ${SUP_MVVM_TESTRESULT_DIR})

if(DEFINED TEST_OUTPUT_DIRECTORY)
  file(MAKE_DIRECTORY ${TEST_OUTPUT_DIRECTORY})
else()
  set(TEST_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
endif()

# directory for autogenerated configs
set(SUP_MVVM_AUTOGEN_DIR ${CMAKE_BINARY_DIR}/autogen/sup-mvvm)
file(MAKE_DIRECTORY ${SUP_MVVM_AUTOGEN_DIR})

# -----------------------------------------------------------------------------
# Dependencies
# -----------------------------------------------------------------------------
if(COA_USE_QT6)
  set(QT_VERSION_MAJOR 6)
  set(QT_FIND_COMPONENTS Widgets Core Gui PrintSupport Test)
else()
  set(QT_VERSION_MAJOR 5)
  set(QT_FIND_COMPONENTS Widgets Core Gui PrintSupport Test)
endif()

if(CODAC_FOUND)
  # Set NO_CMAKE_PATH and PATHS to CMAKE_PREFIX_PATH, so that find_package will use the system Qt first
  # if it finds one, but still look in CMAKE_PREFIX_PATH as a last resort. This gives system Qt priority over CODAC Qt
  set(QT_FIND_OPTIONS NO_CMAKE_PATH PATHS ${CMAKE_PREFIX_PATH})
endif()

find_package(Qt${QT_VERSION_MAJOR} QUIET REQUIRED ${QT_FIND_OPTIONS} COMPONENTS ${QT_FIND_COMPONENTS})

# Gather details about the Qt package found
set(QT_VERSION "${Qt${QT_VERSION_MAJOR}_VERSION_MAJOR}.${Qt${QT_VERSION_MAJOR}_VERSION_MINOR}.${Qt${QT_VERSION_MAJOR}_VERSION_PATCH}")
set(QT_DETAILS "[${Qt${QT_VERSION_MAJOR}_DIR}][v${QT_VERSION}]")
foreach(QT_COMPONENT ${QT_FIND_COMPONENTS})
  get_target_property(QT_${QT_COMPONENT}_LOCATION Qt${QT_VERSION_MAJOR}::${QT_COMPONENT} LOCATION)
  string(PREPEND QT_DETAILS "[${QT_COMPONENT}:${QT_${QT_COMPONENT}_LOCATION}]")
endforeach()

# Print the message about finding Qt if it has not been printed yet, or if the details have changed
# This is essentially a reimplementaion of find_package_message, but with more detailed information gated by verbosity
if(NOT "${QT_DETAILS}" STREQUAL "${FIND_PACKAGE_MESSAGE_DETAILS_QT}")
  message(STATUS "Found Qt: ${Qt${QT_VERSION_MAJOR}_DIR} (version \"${QT_VERSION}\")")
  foreach(QT_COMPONENT ${QT_FIND_COMPONENTS})
    message(VERBOSE "\tQt::${QT_COMPONENT}: ${QT_${QT_COMPONENT}_LOCATION}")
  endforeach()
  set(FIND_PACKAGE_MESSAGE_DETAILS_QT ${QT_DETAILS} CACHE INTERNAL "Details about finding Qt")
endif()

find_package(Threads)

# -----------------------------------------------------------------------------
# Generating config files
# -----------------------------------------------------------------------------
configure_file(${SUP_MVVM_PROJECT_DIR}/cmake/configs/testconfig.h.in ${SUP_MVVM_AUTOGEN_DIR}/testconfig.h @ONLY)
configure_file(${SUP_MVVM_PROJECT_DIR}/cmake/configs/version_constants.h.in ${SUP_MVVM_AUTOGEN_DIR}/version_constants.h @ONLY)
