/******************************************************************************
 *
 * Project       : Operational Applications UI Foundation
 *
 * Description   : The model-view-viewmodel library of generic UI components
 *
 * Author        : Gennady Pospelov (IO)
 *
 * Copyright (c) : 2010-2023 ITER Organization,
 *                 CS 90 046
 *                 13067 St. Paul-lez-Durance Cedex
 *                 France
 *
 * This file is part of ITER CODAC software.
 * For the terms and conditions of redistribution or use of this software
 * refer to the file ITER-LICENSE.TXT located in the top level directory
 * of the distribution package.
 *****************************************************************************/

#ifndef MVVM_SIGNALS_ITEM_LISTENER_BASE_H_
#define MVVM_SIGNALS_ITEM_LISTENER_BASE_H_

#include <mvvm/model_export.h>
#include <mvvm/signals/item_connect_utils.h>
#include <mvvm/signals/signal_slot.h>

#include <memory>

namespace mvvm
{

//! Provides sets of methods to subscribe to various signals generated by SessionItem.
//! Used to implement user actions on item change.

class MVVM_MODEL_EXPORT ItemListenerBase
{
public:
  ItemListenerBase();
  virtual ~ItemListenerBase();

  ItemListenerBase& operator=(const ItemListenerBase& other) = delete;
  ItemListenerBase(const ItemListenerBase& other) = delete;

  void SetItem(SessionItem* item);

  template <typename EventT, typename ReceiverT>
  void Connect(ReceiverT* receiver, void (ReceiverT::*method)(const EventT&))
  {
    connect::Connect<EventT>(GetCurrentItem(), receiver, method, GetSlot());
  }

  template <typename EventT, typename ReceiverT>
  void Connect(ReceiverT* receiver, void (ReceiverT::*method)(const event_variant_t&))
  {
    connect::Connect<EventT>(GetCurrentItem(), receiver, method, GetSlot());
  }

  template <typename EventT>
  void Connect(const std::function<void(const event_variant_t&)>& callback)
  {
    connect::Connect<EventT>(GetCurrentItem(), callback, GetSlot());
  }

protected:
  SessionItem* GetCurrentItem() const;

  virtual void Subscribe() {}    //! For necessary manipulations on new item.
  virtual void Unsubscribe() {}  //! For necessary manipulations on unsubscription.

private:
  Slot* GetSlot() const;

  struct ItemListenerBaseImpl;
  std::unique_ptr<ItemListenerBaseImpl> p_impl;
};

}  // namespace mvvm

#endif  // MVVM_SIGNALS_ITEM_LISTENER_BASE_H_
